{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\backend\\\\Invoice-Mongodb\\\\client\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport InvoiceForm from './components/invoice.js';\n//import InvoiceList from './components/InvoiceList';\nimport './App.css';\n//import './components/animation.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [invoices, setInvoices] = useState([]);\n  const fetchInvoices = async () => {\n    try {\n      const response = await axios.get('http://localhost:5000/invoices');\n      setInvoices(response.data);\n    } catch (error) {\n      console.error('Error fetching invoices', error);\n    }\n  };\n  useEffect(() => {\n    fetchInvoices();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Invoice Management System\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InvoiceForm, {\n      fetchInvoices: fetchInvoices,\n      invoices: invoices\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"Mp0Ae8iaX/+qheNRHlWcSBEWOjE=\");\n_c = App;\nexport default App;\n\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import './App.css';\n\n// function App() {\n//   // State to manage form data, invoices, selected invoice, and customers\n//   const [formData, setFormData] = useState({\n//     customerName: '',\n//     tax: 0,\n//     tip: 0,\n//     items: [{ itemName: '', quantity: 1, price: 0 }],\n\n//   });\n//   const [invoices, setInvoices] = useState([]);\n//   const [selectedInvoice, setSelectedInvoice] = useState(null);\n//   const [customers, setCustomers] = useState([]);\n\n//   useEffect(() => {\n//     fetchAllInvoices();\n//   }, []);\n\n//   // Fetch all invoices and extract unique customer names\n//   const fetchAllInvoices = async () => {\n//     try {\n//       const response = await axios.get('http://localhost:5000/api/invoices');\n//       setInvoices(response.data);\n//       const uniqueCustomers = [...new Set(response.data.map(invoice => invoice.customerName))];\n//       setCustomers(uniqueCustomers);\n//     } catch (error) {\n//       console.error(error);\n//     }\n//   };\n\n//   // Handle input change for form fields\n//   const handleChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData({ ...formData, [name]: value });\n//   };\n\n//   // Handle input change for item fields\n//   const handleItemChange = (index, e) => {\n//     const { name, value } = e.target;\n//     const items = [...formData.items];\n//     items[index][name] = value;\n//     setFormData({ ...formData, items });\n//   };\n\n//   // Add a new item to the invoice\n//   const addItem = () => {\n//     setFormData({ ...formData, items: [...formData.items, { itemName: '', quantity: 1, price: 0 }] });\n//   };\n\n//   // Create a new invoice by sending a POST request\n//   const createInvoice = async () => {\n//     try {\n//       const response = await axios.post('http://localhost:5000/api/invoices', formData);\n//       setInvoices([...invoices, response.data]);\n//       setFormData({\n//         customerName: '',\n//         tax: 0,\n//         tip: 0,\n//         items: [{ itemName: '', quantity: 1, price: 0 }],\n\n//       });\n//       fetchAllInvoices(); // Refresh customers list\n//     } catch (error) {\n//       console.error(error);\n//     }\n//   };\n\n//   // Retrieve an invoice by ID\n//   const getInvoice = async (invoiceId) => {\n//     try {\n//       const response = await axios.get(`http://localhost:5000/api/invoices/${invoiceId}`);\n//       setSelectedInvoice(response.data);\n//     } catch (error) {\n//       console.error(error);\n//     }\n//   };\n\n//   // Delete an invoice by ID\n//   const deleteInvoice = async (invoiceId) => {\n//     try {\n//       await axios.delete(`http://localhost:5000/api/invoices/${invoiceId}`);\n//       setInvoices(invoices.filter(invoice => invoice._id !== invoiceId));\n//       setSelectedInvoice(null);\n//       fetchAllInvoices(); // Refresh customers list\n//     } catch (error) {\n//       console.error(error);\n//     }\n//   };\n\n//   // Calculate the total amount for an invoice\n//   const calculateTotalAmount = (invoice) => {\n//     if (invoice) {\n//       const itemTotal = invoice.items.reduce((acc, item) => acc + item.quantity * item.price, 0);\n//       return itemTotal + invoice.tax + invoice.tip;\n//     }\n//     return 0;\n//   };\n\n//  // Open a new window and print the bill\n//  const handlePrint = (customerName, userId) => {\n//   const currentDate = new Date().toLocaleDateString();\n//   const currentTime = new Date().toLocaleTimeString();\n//   const customerInvoices = invoices.filter(invoice => invoice.customerName === customerName && invoice.userId === userId);\n//   let totalAmount = 0;\n//   const billDetails = customerInvoices.map(invoice => {\n//     totalAmount += calculateTotalAmount(invoice);\n//     return `\n//     <div>\n//       <p>Customer Name: ${invoice.customerName}</p>\n//       <p>User ID: ${invoice.userId}</p>\n//       <p>Date: ${currentDate}</p>\n//       <p>Time: ${currentTime}</p>\n//       <p>Total Amount: ${calculateTotalAmount(invoice)}</p>\n//       <div>\n//         ${invoice.items.map(item => <p>Item: ${item.itemName}, Quantity: ${item.quantity}, Price: ${item.price}</p>).join('')}\n//       </div>\n//       <p>Tax: ${invoice.tax}</p>\n//       <p>Tip: ${invoice.tip}</p>\n//       <hr>\n//     </div>\n//   `;\n//   }).join('');\n//   // Append total amount to bill details\n//   const totalBillDetails = `\n//     <div>\n//       ${billDetails}\n//       <p>Total: ${totalAmount}</p>\n//     </div>\n//   `;\n\n//   // Open a new window and print the bill\n//   const printWindow = window.open('', '', 'width=800,height=600');\n//   printWindow.document.write(`\n//     <html>\n//       <head>\n//         <title>Bill Details</title>\n//       </head>\n//       <body>\n//         ${totalBillDetails}\n//       </body>\n//     </html>\n//   `);\n//   printWindow.document.close();\n//   printWindow.focus();\n//   printWindow.print();\n//   printWindow.close();\n// };\n\n//   // Calculate the total amount for the selected customer\n//   const handleBill = (customerName) => {\n//     const customerInvoices = invoices.filter(invoice => invoice.customerName === customerName);\n//     const totalAmount = customerInvoices.reduce((acc, invoice) => acc + calculateTotalAmount(invoice), 0);\n//     alert(`Total Amount for ${customerName}: ${totalAmount}`);\n//   };\n\n//   // Delete all invoices for the selected customer\n//   const handleDelete = (customerName) => {\n//     const customerInvoices = invoices.filter(invoice => invoice.customerName === customerName);\n//     customerInvoices.forEach(invoice => deleteInvoice(invoice._id));\n//   };\n\n//   return (\n//     <div className=\"App\">\n\n//       {/* <h1>Invoice Management</h1> */}\n//       <div className=\"form\">\n//         <h1>Invoice Management</h1>\n//         <input name=\"customerName\" value={formData.customerName} onChange={handleChange} placeholder=\"Customer Name\" />\n//         <input type=\"number\" name=\"tax\" value={formData.tax} onChange={handleChange} placeholder=\"Tax\" />\n//         <input type=\"number\" name=\"tip\" value={formData.tip} onChange={handleChange} placeholder=\"Tip\" />\n//         {/* <input name=\"userId\" value={formData.userId} onChange={handleChange} placeholder=\"User ID\" /> */}\n//         {formData.items.map((item, index) => (\n//           <div key={index} className=\"item\">\n//             <input name=\"itemName\" value={item.itemName} onChange={(e) => handleItemChange(index, e)} placeholder=\"Item Name\" />\n//             <input type=\"number\" name=\"quantity\" value={item.quantity} onChange={(e) => handleItemChange(index, e)} placeholder=\"Quantity\" />\n//             <input type=\"number\" name=\"price\" value={item.price} onChange={(e) => handleItemChange(index, e)} placeholder=\"Price\" />\n//           </div>\n//         ))}\n//         <button onClick={addItem}>Add Item</button>\n//         <button onClick={createInvoice}>Create Invoice</button>\n//       </div>\n\n//       <div className=\"customer-invoices\">\n//         <h2>Customers and Invoices</h2>\n//         {customers.map((customerName, index) => (\n//           <div key={index} className=\"customer-section\">\n//             <h3>Customer Name: {customerName}</h3>\n//             <div className=\"invoice-actions\">\n//               <button onClick={() => handlePrint(customerName)} className='printbtn'>Print</button>\n//               <button onClick={() => handleBill(customerName)} className='totalbtn'>Total Bill</button>\n//               <button onClick={() => handleDelete(customerName)} className='deletebtn'>Delete</button>\n//             </div>\n//           </div>\n//         ))}\n//       </div>\n\n//       {selectedInvoice && (\n//         <div className=\"invoice-details\">\n//           <h2>Invoice Details</h2>\n//           <p>Customer Name: {selectedInvoice.customerName}</p>\n//           {selectedInvoice.items.map((item, index) => (\n//             <div key={index}>\n//               <p>Item Name: {item.itemName}</p>\n//               <p>Quantity: {item.quantity}</p>\n//               <p>Price: {item.price}</p>\n//             </div>\n//           ))}\n//           <p>Tax: {selectedInvoice.tax}</p>\n//           <p>Tip: {selectedInvoice.tip}</p>\n//           <p>Total Amount: {calculateTotalAmount(selectedInvoice)}</p>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","axios","InvoiceForm","jsxDEV","_jsxDEV","App","_s","invoices","setInvoices","fetchInvoices","response","get","data","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/hp/Desktop/backend/Invoice-Mongodb/client/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport InvoiceForm from './components/invoice.js';\n//import InvoiceList from './components/InvoiceList';\nimport './App.css';\n//import './components/animation.css';\n\nconst App = () => {\n  const [invoices, setInvoices] = useState([]);\n\n  const fetchInvoices = async () => {\n    try {\n      const response = await axios.get('http://localhost:5000/invoices');\n      setInvoices(response.data);\n    } catch (error) {\n      console.error('Error fetching invoices', error);\n    }\n  };\n\n  useEffect(() => {\n    fetchInvoices();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <h1>Invoice Management System</h1>\n      <InvoiceForm fetchInvoices={fetchInvoices} invoices={invoices}/>\n      {/* <InvoiceList invoices={invoices} fetchInvoices={fetchInvoices} /> */}\n    </div>\n  );\n};\n\nexport default App;\n\n\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import './App.css';\n\n\n// function App() {\n//   // State to manage form data, invoices, selected invoice, and customers\n//   const [formData, setFormData] = useState({\n//     customerName: '',\n//     tax: 0,\n//     tip: 0,\n//     items: [{ itemName: '', quantity: 1, price: 0 }],\n\n//   });\n//   const [invoices, setInvoices] = useState([]);\n//   const [selectedInvoice, setSelectedInvoice] = useState(null);\n//   const [customers, setCustomers] = useState([]);\n\n//   useEffect(() => {\n//     fetchAllInvoices();\n//   }, []);\n\n//   // Fetch all invoices and extract unique customer names\n//   const fetchAllInvoices = async () => {\n//     try {\n//       const response = await axios.get('http://localhost:5000/api/invoices');\n//       setInvoices(response.data);\n//       const uniqueCustomers = [...new Set(response.data.map(invoice => invoice.customerName))];\n//       setCustomers(uniqueCustomers);\n//     } catch (error) {\n//       console.error(error);\n//     }\n//   };\n\n//   // Handle input change for form fields\n//   const handleChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData({ ...formData, [name]: value });\n//   };\n\n//   // Handle input change for item fields\n//   const handleItemChange = (index, e) => {\n//     const { name, value } = e.target;\n//     const items = [...formData.items];\n//     items[index][name] = value;\n//     setFormData({ ...formData, items });\n//   };\n\n//   // Add a new item to the invoice\n//   const addItem = () => {\n//     setFormData({ ...formData, items: [...formData.items, { itemName: '', quantity: 1, price: 0 }] });\n//   };\n\n//   // Create a new invoice by sending a POST request\n//   const createInvoice = async () => {\n//     try {\n//       const response = await axios.post('http://localhost:5000/api/invoices', formData);\n//       setInvoices([...invoices, response.data]);\n//       setFormData({\n//         customerName: '',\n//         tax: 0,\n//         tip: 0,\n//         items: [{ itemName: '', quantity: 1, price: 0 }],\n\n//       });\n//       fetchAllInvoices(); // Refresh customers list\n//     } catch (error) {\n//       console.error(error);\n//     }\n//   };\n\n//   // Retrieve an invoice by ID\n//   const getInvoice = async (invoiceId) => {\n//     try {\n//       const response = await axios.get(`http://localhost:5000/api/invoices/${invoiceId}`);\n//       setSelectedInvoice(response.data);\n//     } catch (error) {\n//       console.error(error);\n//     }\n//   };\n\n//   // Delete an invoice by ID\n//   const deleteInvoice = async (invoiceId) => {\n//     try {\n//       await axios.delete(`http://localhost:5000/api/invoices/${invoiceId}`);\n//       setInvoices(invoices.filter(invoice => invoice._id !== invoiceId));\n//       setSelectedInvoice(null);\n//       fetchAllInvoices(); // Refresh customers list\n//     } catch (error) {\n//       console.error(error);\n//     }\n//   };\n\n//   // Calculate the total amount for an invoice\n//   const calculateTotalAmount = (invoice) => {\n//     if (invoice) {\n//       const itemTotal = invoice.items.reduce((acc, item) => acc + item.quantity * item.price, 0);\n//       return itemTotal + invoice.tax + invoice.tip;\n//     }\n//     return 0;\n//   };\n\n\n//  // Open a new window and print the bill\n//  const handlePrint = (customerName, userId) => {\n//   const currentDate = new Date().toLocaleDateString();\n//   const currentTime = new Date().toLocaleTimeString();\n//   const customerInvoices = invoices.filter(invoice => invoice.customerName === customerName && invoice.userId === userId);\n//   let totalAmount = 0;\n//   const billDetails = customerInvoices.map(invoice => {\n//     totalAmount += calculateTotalAmount(invoice);\n//     return `\n//     <div>\n//       <p>Customer Name: ${invoice.customerName}</p>\n//       <p>User ID: ${invoice.userId}</p>\n//       <p>Date: ${currentDate}</p>\n//       <p>Time: ${currentTime}</p>\n//       <p>Total Amount: ${calculateTotalAmount(invoice)}</p>\n//       <div>\n//         ${invoice.items.map(item => <p>Item: ${item.itemName}, Quantity: ${item.quantity}, Price: ${item.price}</p>).join('')}\n//       </div>\n//       <p>Tax: ${invoice.tax}</p>\n//       <p>Tip: ${invoice.tip}</p>\n//       <hr>\n//     </div>\n//   `;\n//   }).join('');\n//   // Append total amount to bill details\n//   const totalBillDetails = `\n//     <div>\n//       ${billDetails}\n//       <p>Total: ${totalAmount}</p>\n//     </div>\n//   `;\n\n//   // Open a new window and print the bill\n//   const printWindow = window.open('', '', 'width=800,height=600');\n//   printWindow.document.write(`\n//     <html>\n//       <head>\n//         <title>Bill Details</title>\n//       </head>\n//       <body>\n//         ${totalBillDetails}\n//       </body>\n//     </html>\n//   `);\n//   printWindow.document.close();\n//   printWindow.focus();\n//   printWindow.print();\n//   printWindow.close();\n// };\n\n//   // Calculate the total amount for the selected customer\n//   const handleBill = (customerName) => {\n//     const customerInvoices = invoices.filter(invoice => invoice.customerName === customerName);\n//     const totalAmount = customerInvoices.reduce((acc, invoice) => acc + calculateTotalAmount(invoice), 0);\n//     alert(`Total Amount for ${customerName}: ${totalAmount}`);\n//   };\n\n//   // Delete all invoices for the selected customer\n//   const handleDelete = (customerName) => {\n//     const customerInvoices = invoices.filter(invoice => invoice.customerName === customerName);\n//     customerInvoices.forEach(invoice => deleteInvoice(invoice._id));\n//   };\n\n//   return (\n//     <div className=\"App\">\n    \n//       {/* <h1>Invoice Management</h1> */}\n//       <div className=\"form\">\n//         <h1>Invoice Management</h1>\n//         <input name=\"customerName\" value={formData.customerName} onChange={handleChange} placeholder=\"Customer Name\" />\n//         <input type=\"number\" name=\"tax\" value={formData.tax} onChange={handleChange} placeholder=\"Tax\" />\n//         <input type=\"number\" name=\"tip\" value={formData.tip} onChange={handleChange} placeholder=\"Tip\" />\n//         {/* <input name=\"userId\" value={formData.userId} onChange={handleChange} placeholder=\"User ID\" /> */}\n//         {formData.items.map((item, index) => (\n//           <div key={index} className=\"item\">\n//             <input name=\"itemName\" value={item.itemName} onChange={(e) => handleItemChange(index, e)} placeholder=\"Item Name\" />\n//             <input type=\"number\" name=\"quantity\" value={item.quantity} onChange={(e) => handleItemChange(index, e)} placeholder=\"Quantity\" />\n//             <input type=\"number\" name=\"price\" value={item.price} onChange={(e) => handleItemChange(index, e)} placeholder=\"Price\" />\n//           </div>\n//         ))}\n//         <button onClick={addItem}>Add Item</button>\n//         <button onClick={createInvoice}>Create Invoice</button>\n//       </div>\n\n//       <div className=\"customer-invoices\">\n//         <h2>Customers and Invoices</h2>\n//         {customers.map((customerName, index) => (\n//           <div key={index} className=\"customer-section\">\n//             <h3>Customer Name: {customerName}</h3>\n//             <div className=\"invoice-actions\">\n//               <button onClick={() => handlePrint(customerName)} className='printbtn'>Print</button>\n//               <button onClick={() => handleBill(customerName)} className='totalbtn'>Total Bill</button>\n//               <button onClick={() => handleDelete(customerName)} className='deletebtn'>Delete</button>\n//             </div>\n//           </div>\n//         ))}\n//       </div>\n\n//       {selectedInvoice && (\n//         <div className=\"invoice-details\">\n//           <h2>Invoice Details</h2>\n//           <p>Customer Name: {selectedInvoice.customerName}</p>\n//           {selectedInvoice.items.map((item, index) => (\n//             <div key={index}>\n//               <p>Item Name: {item.itemName}</p>\n//               <p>Quantity: {item.quantity}</p>\n//               <p>Price: {item.price}</p>\n//             </div>\n//           ))}\n//           <p>Tax: {selectedInvoice.tax}</p>\n//           <p>Tip: {selectedInvoice.tip}</p>\n//           <p>Total Amount: {calculateTotalAmount(selectedInvoice)}</p>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,WAAW,MAAM,yBAAyB;AACjD;AACA,OAAO,WAAW;AAClB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAE5C,MAAMS,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMT,KAAK,CAACU,GAAG,CAAC,gCAAgC,CAAC;MAClEH,WAAW,CAACE,QAAQ,CAACE,IAAI,CAAC;IAC5B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IACjD;EACF,CAAC;EAEDd,SAAS,CAAC,MAAM;IACdU,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEL,OAAA;IAAKW,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBZ,OAAA;MAAAY,QAAA,EAAI;IAAyB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAClChB,OAAA,CAACF,WAAW;MAACO,aAAa,EAAEA,aAAc;MAACF,QAAQ,EAAEA;IAAS;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAE7D,CAAC;AAEV,CAAC;AAACd,EAAA,CAvBID,GAAG;AAAAgB,EAAA,GAAHhB,GAAG;AAyBT,eAAeA,GAAG;;AAGlgB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}